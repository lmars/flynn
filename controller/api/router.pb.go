// Code generated by protoc-gen-go. DO NOT EDIT.
// source: router.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RouteChange_Action int32

const (
	// Unused/invalid default value.
	RouteChange_ACTION_UNSPECIFIED RouteChange_Action = 0
	// ACTION_CREATE represents a route that was created.
	RouteChange_ACTION_CREATE RouteChange_Action = 1
	// ACTION_UPDATE represents a route that was updated.
	RouteChange_ACTION_UPDATE RouteChange_Action = 2
	// ACTION_DELETE represents a route that was deleted.
	RouteChange_ACTION_DELETE RouteChange_Action = 3
)

var RouteChange_Action_name = map[int32]string{
	0: "ACTION_UNSPECIFIED",
	1: "ACTION_CREATE",
	2: "ACTION_UPDATE",
	3: "ACTION_DELETE",
}

var RouteChange_Action_value = map[string]int32{
	"ACTION_UNSPECIFIED": 0,
	"ACTION_CREATE":      1,
	"ACTION_UPDATE":      2,
	"ACTION_DELETE":      3,
}

func (x RouteChange_Action) String() string {
	return proto.EnumName(RouteChange_Action_name, int32(x))
}

func (RouteChange_Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{15, 0}
}

// A TLS key algorithm.
type Key_Algorithm int32

const (
	// Default value.
	Key_KEY_ALG_UNSPECIFIED Key_Algorithm = 0
	// NIST ECC P-256 curve
	Key_KEY_ALG_ECC_P256 Key_Algorithm = 1
	// 2048-bit RSA
	Key_KEY_ALG_RSA_2048 Key_Algorithm = 2
	// 4096-bit RSA
	Key_KEY_ALG_RSA_4096 Key_Algorithm = 3
)

var Key_Algorithm_name = map[int32]string{
	0: "KEY_ALG_UNSPECIFIED",
	1: "KEY_ALG_ECC_P256",
	2: "KEY_ALG_RSA_2048",
	3: "KEY_ALG_RSA_4096",
}

var Key_Algorithm_value = map[string]int32{
	"KEY_ALG_UNSPECIFIED": 0,
	"KEY_ALG_ECC_P256":    1,
	"KEY_ALG_RSA_2048":    2,
	"KEY_ALG_RSA_4096":    3,
}

func (x Key_Algorithm) String() string {
	return proto.EnumName(Key_Algorithm_name, int32(x))
}

func (Key_Algorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{17, 0}
}

// The status of the certificate.
type StaticCertificate_Status int32

const (
	// Unused/invalid default value.
	StaticCertificate_STATUS_UNSPECIFIED StaticCertificate_Status = 0
	// The certificate is valid.
	StaticCertificate_STATUS_VALID StaticCertificate_Status = 1
	// The certificate has expired.
	StaticCertificate_STATUS_EXPIRED StaticCertificate_Status = 2
	// The certificate has been revoked.
	StaticCertificate_STATUS_REVOKED StaticCertificate_Status = 3
	// The certificate is not valid yet.
	StaticCertificate_STATUS_FUTURE_NOT_BEFORE StaticCertificate_Status = 4
	// The chain is invalid due to issues like issuer/subject mismatch,
	// unsatisfied constraints, and intermediate expiry.
	StaticCertificate_STATUS_INVALID StaticCertificate_Status = 5
)

var StaticCertificate_Status_name = map[int32]string{
	0: "STATUS_UNSPECIFIED",
	1: "STATUS_VALID",
	2: "STATUS_EXPIRED",
	3: "STATUS_REVOKED",
	4: "STATUS_FUTURE_NOT_BEFORE",
	5: "STATUS_INVALID",
}

var StaticCertificate_Status_value = map[string]int32{
	"STATUS_UNSPECIFIED":       0,
	"STATUS_VALID":             1,
	"STATUS_EXPIRED":           2,
	"STATUS_REVOKED":           3,
	"STATUS_FUTURE_NOT_BEFORE": 4,
	"STATUS_INVALID":           5,
}

func (x StaticCertificate_Status) String() string {
	return proto.EnumName(StaticCertificate_Status_name, int32(x))
}

func (StaticCertificate_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{19, 0}
}

// A domain validation method.
type ManagedCertificate_ValidationMethod int32

const (
	// The default value.
	ManagedCertificate_METHOD_UNSPECIFIED ManagedCertificate_ValidationMethod = 0
	// Automatically managed domain validation, the domain must have CNAME
	// or A/AAAA records pointing at the Flynn cluster's ports 80 and 443 for
	// validation to succeed.
	ManagedCertificate_METHOD_AUTO ManagedCertificate_ValidationMethod = 1
)

var ManagedCertificate_ValidationMethod_name = map[int32]string{
	0: "METHOD_UNSPECIFIED",
	1: "METHOD_AUTO",
}

var ManagedCertificate_ValidationMethod_value = map[string]int32{
	"METHOD_UNSPECIFIED": 0,
	"METHOD_AUTO":        1,
}

func (x ManagedCertificate_ValidationMethod) String() string {
	return proto.EnumName(ManagedCertificate_ValidationMethod_name, int32(x))
}

func (ManagedCertificate_ValidationMethod) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{20, 0}
}

// The issuance status of the managed certificate.
type ManagedCertificate_Status int32

const (
	// Unused/invalid default value.
	ManagedCertificate_STATUS_UNSPECIFIED ManagedCertificate_Status = 0
	// The initial state of a managed certificate, pending validation or
	// issuance, can transition to ISSUED or FAILED.
	ManagedCertificate_STATUS_PENDING ManagedCertificate_Status = 1
	// The certificate has been successfully validated and issued.
	ManagedCertificate_STATUS_ISSUED ManagedCertificate_Status = 2
	// Certificate issuance failed. Check errors for details.
	ManagedCertificate_STATUS_FAILED ManagedCertificate_Status = 3
)

var ManagedCertificate_Status_name = map[int32]string{
	0: "STATUS_UNSPECIFIED",
	1: "STATUS_PENDING",
	2: "STATUS_ISSUED",
	3: "STATUS_FAILED",
}

var ManagedCertificate_Status_value = map[string]int32{
	"STATUS_UNSPECIFIED": 0,
	"STATUS_PENDING":     1,
	"STATUS_ISSUED":      2,
	"STATUS_FAILED":      3,
}

func (x ManagedCertificate_Status) String() string {
	return proto.EnumName(ManagedCertificate_Status_name, int32(x))
}

func (ManagedCertificate_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{20, 1}
}

// SetRoutesRequest is a request to set a list of app routes.
type SetRoutesRequest struct {
	// app_routes are the app routes to set.
	AppRoutes []*AppRoutes `protobuf:"bytes,1,rep,name=app_routes,json=appRoutes,proto3" json:"app_routes,omitempty"`
	// dry_run indicates whether to just generate the changes that would be
	// applied to existing routes by this request (true) or to also atomically
	// apply the route changes (false).
	DryRun bool `protobuf:"varint,2,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
	// expected_state is the expected state of existing routes to apply this
	// request to, with the request failing if the actual state differs.
	ExpectedState        []byte   `protobuf:"bytes,3,opt,name=expected_state,json=expectedState,proto3" json:"expected_state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetRoutesRequest) Reset()         { *m = SetRoutesRequest{} }
func (m *SetRoutesRequest) String() string { return proto.CompactTextString(m) }
func (*SetRoutesRequest) ProtoMessage()    {}
func (*SetRoutesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{0}
}

func (m *SetRoutesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetRoutesRequest.Unmarshal(m, b)
}
func (m *SetRoutesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetRoutesRequest.Marshal(b, m, deterministic)
}
func (m *SetRoutesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetRoutesRequest.Merge(m, src)
}
func (m *SetRoutesRequest) XXX_Size() int {
	return xxx_messageInfo_SetRoutesRequest.Size(m)
}
func (m *SetRoutesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetRoutesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetRoutesRequest proto.InternalMessageInfo

func (m *SetRoutesRequest) GetAppRoutes() []*AppRoutes {
	if m != nil {
		return m.AppRoutes
	}
	return nil
}

func (m *SetRoutesRequest) GetDryRun() bool {
	if m != nil {
		return m.DryRun
	}
	return false
}

func (m *SetRoutesRequest) GetExpectedState() []byte {
	if m != nil {
		return m.ExpectedState
	}
	return nil
}

// SetRoutesResponse is a response to a SetRoutes request.
type SetRoutesResponse struct {
	// route_changes is the list of route changes that were either applied if
	// dry_run=false or that would have been applied if dry_run=true.
	RouteChanges []*RouteChange `protobuf:"bytes,1,rep,name=route_changes,json=routeChanges,proto3" json:"route_changes,omitempty"`
	// dry_run indicates whether the request was a dry run or not.
	DryRun bool `protobuf:"varint,2,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
	// applied_to_state is the state of the existing routes that this request was
	// applied to, and can be used as the expected_state in a subsequent request
	// to confirm the application of a dry run.
	AppliedToState       []byte   `protobuf:"bytes,3,opt,name=applied_to_state,json=appliedToState,proto3" json:"applied_to_state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetRoutesResponse) Reset()         { *m = SetRoutesResponse{} }
func (m *SetRoutesResponse) String() string { return proto.CompactTextString(m) }
func (*SetRoutesResponse) ProtoMessage()    {}
func (*SetRoutesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{1}
}

func (m *SetRoutesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetRoutesResponse.Unmarshal(m, b)
}
func (m *SetRoutesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetRoutesResponse.Marshal(b, m, deterministic)
}
func (m *SetRoutesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetRoutesResponse.Merge(m, src)
}
func (m *SetRoutesResponse) XXX_Size() int {
	return xxx_messageInfo_SetRoutesResponse.Size(m)
}
func (m *SetRoutesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetRoutesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetRoutesResponse proto.InternalMessageInfo

func (m *SetRoutesResponse) GetRouteChanges() []*RouteChange {
	if m != nil {
		return m.RouteChanges
	}
	return nil
}

func (m *SetRoutesResponse) GetDryRun() bool {
	if m != nil {
		return m.DryRun
	}
	return false
}

func (m *SetRoutesResponse) GetAppliedToState() []byte {
	if m != nil {
		return m.AppliedToState
	}
	return nil
}

// ListAppRoutesRequest is a request to list routes for a set of apps.
type ListAppRoutesRequest struct {
	// apps is the set of apps to list routes for.
	Apps                 []string `protobuf:"bytes,1,rep,name=apps,proto3" json:"apps,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListAppRoutesRequest) Reset()         { *m = ListAppRoutesRequest{} }
func (m *ListAppRoutesRequest) String() string { return proto.CompactTextString(m) }
func (*ListAppRoutesRequest) ProtoMessage()    {}
func (*ListAppRoutesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{2}
}

func (m *ListAppRoutesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListAppRoutesRequest.Unmarshal(m, b)
}
func (m *ListAppRoutesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListAppRoutesRequest.Marshal(b, m, deterministic)
}
func (m *ListAppRoutesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAppRoutesRequest.Merge(m, src)
}
func (m *ListAppRoutesRequest) XXX_Size() int {
	return xxx_messageInfo_ListAppRoutesRequest.Size(m)
}
func (m *ListAppRoutesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAppRoutesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListAppRoutesRequest proto.InternalMessageInfo

func (m *ListAppRoutesRequest) GetApps() []string {
	if m != nil {
		return m.Apps
	}
	return nil
}

// ListAppRoutesResponse is a response to list routes for a set of apps.
type ListAppRoutesResponse struct {
	// app_routes are the requested routes.
	AppRoutes []*AppRoutes `protobuf:"bytes,1,rep,name=app_routes,json=appRoutes,proto3" json:"app_routes,omitempty"`
	// state is the state of the returned routes that can be used as the
	// expected_state in a subsequent call to SetRoutes.
	State                []byte   `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListAppRoutesResponse) Reset()         { *m = ListAppRoutesResponse{} }
func (m *ListAppRoutesResponse) String() string { return proto.CompactTextString(m) }
func (*ListAppRoutesResponse) ProtoMessage()    {}
func (*ListAppRoutesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{3}
}

func (m *ListAppRoutesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListAppRoutesResponse.Unmarshal(m, b)
}
func (m *ListAppRoutesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListAppRoutesResponse.Marshal(b, m, deterministic)
}
func (m *ListAppRoutesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAppRoutesResponse.Merge(m, src)
}
func (m *ListAppRoutesResponse) XXX_Size() int {
	return xxx_messageInfo_ListAppRoutesResponse.Size(m)
}
func (m *ListAppRoutesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAppRoutesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListAppRoutesResponse proto.InternalMessageInfo

func (m *ListAppRoutesResponse) GetAppRoutes() []*AppRoutes {
	if m != nil {
		return m.AppRoutes
	}
	return nil
}

func (m *ListAppRoutesResponse) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

// A request to list TLS keys.
type ListKeysRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListKeysRequest) Reset()         { *m = ListKeysRequest{} }
func (m *ListKeysRequest) String() string { return proto.CompactTextString(m) }
func (*ListKeysRequest) ProtoMessage()    {}
func (*ListKeysRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{4}
}

func (m *ListKeysRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListKeysRequest.Unmarshal(m, b)
}
func (m *ListKeysRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListKeysRequest.Marshal(b, m, deterministic)
}
func (m *ListKeysRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListKeysRequest.Merge(m, src)
}
func (m *ListKeysRequest) XXX_Size() int {
	return xxx_messageInfo_ListKeysRequest.Size(m)
}
func (m *ListKeysRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListKeysRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListKeysRequest proto.InternalMessageInfo

// A response containing a list of TLS keys.
type ListKeysResponse struct {
	// The TLS keys.
	Keys                 []*Key   `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListKeysResponse) Reset()         { *m = ListKeysResponse{} }
func (m *ListKeysResponse) String() string { return proto.CompactTextString(m) }
func (*ListKeysResponse) ProtoMessage()    {}
func (*ListKeysResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{5}
}

func (m *ListKeysResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListKeysResponse.Unmarshal(m, b)
}
func (m *ListKeysResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListKeysResponse.Marshal(b, m, deterministic)
}
func (m *ListKeysResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListKeysResponse.Merge(m, src)
}
func (m *ListKeysResponse) XXX_Size() int {
	return xxx_messageInfo_ListKeysResponse.Size(m)
}
func (m *ListKeysResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListKeysResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListKeysResponse proto.InternalMessageInfo

func (m *ListKeysResponse) GetKeys() []*Key {
	if m != nil {
		return m.Keys
	}
	return nil
}

// A request to get a TLS private key.
type GetKeyRequest struct {
	// Required. The name of the TLS key to get in the format `tls-keys/{KEY_ID}`
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetKeyRequest) Reset()         { *m = GetKeyRequest{} }
func (m *GetKeyRequest) String() string { return proto.CompactTextString(m) }
func (*GetKeyRequest) ProtoMessage()    {}
func (*GetKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{6}
}

func (m *GetKeyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetKeyRequest.Unmarshal(m, b)
}
func (m *GetKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetKeyRequest.Marshal(b, m, deterministic)
}
func (m *GetKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetKeyRequest.Merge(m, src)
}
func (m *GetKeyRequest) XXX_Size() int {
	return xxx_messageInfo_GetKeyRequest.Size(m)
}
func (m *GetKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetKeyRequest proto.InternalMessageInfo

func (m *GetKeyRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// A response containing a TLS private key.
type GetKeyResponse struct {
	// The DER-encoded TLS private key.
	PrivateKey           []byte   `protobuf:"bytes,1,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetKeyResponse) Reset()         { *m = GetKeyResponse{} }
func (m *GetKeyResponse) String() string { return proto.CompactTextString(m) }
func (*GetKeyResponse) ProtoMessage()    {}
func (*GetKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{7}
}

func (m *GetKeyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetKeyResponse.Unmarshal(m, b)
}
func (m *GetKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetKeyResponse.Marshal(b, m, deterministic)
}
func (m *GetKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetKeyResponse.Merge(m, src)
}
func (m *GetKeyResponse) XXX_Size() int {
	return xxx_messageInfo_GetKeyResponse.Size(m)
}
func (m *GetKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetKeyResponse proto.InternalMessageInfo

func (m *GetKeyResponse) GetPrivateKey() []byte {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

// A request to create a new TLS key.
type CreateKeyRequest struct {
	// Required. The private key data. It must be DER-encoded PKCS#1 (RSA),
	// PKCS#8 (RSA/ECC), or SEC1 (ECC).
	PrivateKey           []byte   `protobuf:"bytes,1,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateKeyRequest) Reset()         { *m = CreateKeyRequest{} }
func (m *CreateKeyRequest) String() string { return proto.CompactTextString(m) }
func (*CreateKeyRequest) ProtoMessage()    {}
func (*CreateKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{8}
}

func (m *CreateKeyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateKeyRequest.Unmarshal(m, b)
}
func (m *CreateKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateKeyRequest.Marshal(b, m, deterministic)
}
func (m *CreateKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateKeyRequest.Merge(m, src)
}
func (m *CreateKeyRequest) XXX_Size() int {
	return xxx_messageInfo_CreateKeyRequest.Size(m)
}
func (m *CreateKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateKeyRequest proto.InternalMessageInfo

func (m *CreateKeyRequest) GetPrivateKey() []byte {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

// A response containing a TLS key that was created.
type CreateKeyResponse struct {
	// The TLS key that was created.
	Key                  *Key     `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateKeyResponse) Reset()         { *m = CreateKeyResponse{} }
func (m *CreateKeyResponse) String() string { return proto.CompactTextString(m) }
func (*CreateKeyResponse) ProtoMessage()    {}
func (*CreateKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{9}
}

func (m *CreateKeyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateKeyResponse.Unmarshal(m, b)
}
func (m *CreateKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateKeyResponse.Marshal(b, m, deterministic)
}
func (m *CreateKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateKeyResponse.Merge(m, src)
}
func (m *CreateKeyResponse) XXX_Size() int {
	return xxx_messageInfo_CreateKeyResponse.Size(m)
}
func (m *CreateKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateKeyResponse proto.InternalMessageInfo

func (m *CreateKeyResponse) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

// A request to delete a TLS key.
type DeleteKeyRequest struct {
	// Required. The TLS key resource name in the format `tls-keys/{KEY_ID}`
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteKeyRequest) Reset()         { *m = DeleteKeyRequest{} }
func (m *DeleteKeyRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteKeyRequest) ProtoMessage()    {}
func (*DeleteKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{10}
}

func (m *DeleteKeyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteKeyRequest.Unmarshal(m, b)
}
func (m *DeleteKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteKeyRequest.Marshal(b, m, deterministic)
}
func (m *DeleteKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteKeyRequest.Merge(m, src)
}
func (m *DeleteKeyRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteKeyRequest.Size(m)
}
func (m *DeleteKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteKeyRequest proto.InternalMessageInfo

func (m *DeleteKeyRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// A response containing a TLS key that was deleted.
type DeleteKeyResponse struct {
	// The TLS key that was deleted.
	Key                  *Key     `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteKeyResponse) Reset()         { *m = DeleteKeyResponse{} }
func (m *DeleteKeyResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteKeyResponse) ProtoMessage()    {}
func (*DeleteKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{11}
}

func (m *DeleteKeyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteKeyResponse.Unmarshal(m, b)
}
func (m *DeleteKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteKeyResponse.Marshal(b, m, deterministic)
}
func (m *DeleteKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteKeyResponse.Merge(m, src)
}
func (m *DeleteKeyResponse) XXX_Size() int {
	return xxx_messageInfo_DeleteKeyResponse.Size(m)
}
func (m *DeleteKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteKeyResponse proto.InternalMessageInfo

func (m *DeleteKeyResponse) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

// A request to update a managed certificate.
type UpdateManagedCertificateRequest struct {
	// The managed certificate to update.
	Certificate          *ManagedCertificate `protobuf:"bytes,1,opt,name=certificate,proto3" json:"certificate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *UpdateManagedCertificateRequest) Reset()         { *m = UpdateManagedCertificateRequest{} }
func (m *UpdateManagedCertificateRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateManagedCertificateRequest) ProtoMessage()    {}
func (*UpdateManagedCertificateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{12}
}

func (m *UpdateManagedCertificateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateManagedCertificateRequest.Unmarshal(m, b)
}
func (m *UpdateManagedCertificateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateManagedCertificateRequest.Marshal(b, m, deterministic)
}
func (m *UpdateManagedCertificateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateManagedCertificateRequest.Merge(m, src)
}
func (m *UpdateManagedCertificateRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateManagedCertificateRequest.Size(m)
}
func (m *UpdateManagedCertificateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateManagedCertificateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateManagedCertificateRequest proto.InternalMessageInfo

func (m *UpdateManagedCertificateRequest) GetCertificate() *ManagedCertificate {
	if m != nil {
		return m.Certificate
	}
	return nil
}

// A response containing a managed certificate that was updated.
type UpdateManagedCertificateResponse struct {
	// The managed certificate that was updated.
	Certificate          *ManagedCertificate `protobuf:"bytes,1,opt,name=certificate,proto3" json:"certificate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *UpdateManagedCertificateResponse) Reset()         { *m = UpdateManagedCertificateResponse{} }
func (m *UpdateManagedCertificateResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateManagedCertificateResponse) ProtoMessage()    {}
func (*UpdateManagedCertificateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{13}
}

func (m *UpdateManagedCertificateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateManagedCertificateResponse.Unmarshal(m, b)
}
func (m *UpdateManagedCertificateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateManagedCertificateResponse.Marshal(b, m, deterministic)
}
func (m *UpdateManagedCertificateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateManagedCertificateResponse.Merge(m, src)
}
func (m *UpdateManagedCertificateResponse) XXX_Size() int {
	return xxx_messageInfo_UpdateManagedCertificateResponse.Size(m)
}
func (m *UpdateManagedCertificateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateManagedCertificateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateManagedCertificateResponse proto.InternalMessageInfo

func (m *UpdateManagedCertificateResponse) GetCertificate() *ManagedCertificate {
	if m != nil {
		return m.Certificate
	}
	return nil
}

// AppRoutes is a list of desired routes for an app.
type AppRoutes struct {
	// app is an identifier for the app.
	App string `protobuf:"bytes,1,opt,name=app,proto3" json:"app,omitempty"`
	// routes are the desired routes for the app.
	Routes               []*Route `protobuf:"bytes,2,rep,name=routes,proto3" json:"routes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppRoutes) Reset()         { *m = AppRoutes{} }
func (m *AppRoutes) String() string { return proto.CompactTextString(m) }
func (*AppRoutes) ProtoMessage()    {}
func (*AppRoutes) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{14}
}

func (m *AppRoutes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppRoutes.Unmarshal(m, b)
}
func (m *AppRoutes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppRoutes.Marshal(b, m, deterministic)
}
func (m *AppRoutes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppRoutes.Merge(m, src)
}
func (m *AppRoutes) XXX_Size() int {
	return xxx_messageInfo_AppRoutes.Size(m)
}
func (m *AppRoutes) XXX_DiscardUnknown() {
	xxx_messageInfo_AppRoutes.DiscardUnknown(m)
}

var xxx_messageInfo_AppRoutes proto.InternalMessageInfo

func (m *AppRoutes) GetApp() string {
	if m != nil {
		return m.App
	}
	return ""
}

func (m *AppRoutes) GetRoutes() []*Route {
	if m != nil {
		return m.Routes
	}
	return nil
}

// RouteChange is a change made to a route in response to a SetRoutes request.
type RouteChange struct {
	// action is the action that was performed.
	Action RouteChange_Action `protobuf:"varint,1,opt,name=action,proto3,enum=flynn.api.v1.RouteChange_Action" json:"action,omitempty"`
	// before is the route before the action was applied.
	Before *Route `protobuf:"bytes,2,opt,name=before,proto3" json:"before,omitempty"`
	// after is the route after the action was applied.
	After                *Route   `protobuf:"bytes,3,opt,name=after,proto3" json:"after,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RouteChange) Reset()         { *m = RouteChange{} }
func (m *RouteChange) String() string { return proto.CompactTextString(m) }
func (*RouteChange) ProtoMessage()    {}
func (*RouteChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{15}
}

func (m *RouteChange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteChange.Unmarshal(m, b)
}
func (m *RouteChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteChange.Marshal(b, m, deterministic)
}
func (m *RouteChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteChange.Merge(m, src)
}
func (m *RouteChange) XXX_Size() int {
	return xxx_messageInfo_RouteChange.Size(m)
}
func (m *RouteChange) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteChange.DiscardUnknown(m)
}

var xxx_messageInfo_RouteChange proto.InternalMessageInfo

func (m *RouteChange) GetAction() RouteChange_Action {
	if m != nil {
		return m.Action
	}
	return RouteChange_ACTION_UNSPECIFIED
}

func (m *RouteChange) GetBefore() *Route {
	if m != nil {
		return m.Before
	}
	return nil
}

func (m *RouteChange) GetAfter() *Route {
	if m != nil {
		return m.After
	}
	return nil
}

// Route is a HTTP or TCP route.
type Route struct {
	// Output only. The unique identifier of this route resource in the format:
	// `apps/{APP_ID}/routes/{ROUTE_ID}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Required. The parent resource name, in the format `apps/{APP_ID}` or
	// `apps/{APP_DISPLAY_NAME}`
	Parent string `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	// Required. The discoverd service target for this route.
	ServiceTarget *Route_ServiceTarget `protobuf:"bytes,3,opt,name=service_target,json=serviceTarget,proto3" json:"service_target,omitempty"`
	// Disable keep-alives between the router and backends for this route.
	DisableKeepAlives bool `protobuf:"varint,4,opt,name=disable_keep_alives,json=disableKeepAlives,proto3" json:"disable_keep_alives,omitempty"`
	// The protocol-specific configuration.
	//
	// Types that are valid to be assigned to Config:
	//	*Route_Http
	//	*Route_Tcp
	Config               isRoute_Config `protobuf_oneof:"config"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Route) Reset()         { *m = Route{} }
func (m *Route) String() string { return proto.CompactTextString(m) }
func (*Route) ProtoMessage()    {}
func (*Route) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{16}
}

func (m *Route) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Route.Unmarshal(m, b)
}
func (m *Route) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Route.Marshal(b, m, deterministic)
}
func (m *Route) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Route.Merge(m, src)
}
func (m *Route) XXX_Size() int {
	return xxx_messageInfo_Route.Size(m)
}
func (m *Route) XXX_DiscardUnknown() {
	xxx_messageInfo_Route.DiscardUnknown(m)
}

var xxx_messageInfo_Route proto.InternalMessageInfo

func (m *Route) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Route) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *Route) GetServiceTarget() *Route_ServiceTarget {
	if m != nil {
		return m.ServiceTarget
	}
	return nil
}

func (m *Route) GetDisableKeepAlives() bool {
	if m != nil {
		return m.DisableKeepAlives
	}
	return false
}

type isRoute_Config interface {
	isRoute_Config()
}

type Route_Http struct {
	Http *Route_HTTP `protobuf:"bytes,5,opt,name=http,proto3,oneof"`
}

type Route_Tcp struct {
	Tcp *Route_TCP `protobuf:"bytes,6,opt,name=tcp,proto3,oneof"`
}

func (*Route_Http) isRoute_Config() {}

func (*Route_Tcp) isRoute_Config() {}

func (m *Route) GetConfig() isRoute_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *Route) GetHttp() *Route_HTTP {
	if x, ok := m.GetConfig().(*Route_Http); ok {
		return x.Http
	}
	return nil
}

func (m *Route) GetTcp() *Route_TCP {
	if x, ok := m.GetConfig().(*Route_Tcp); ok {
		return x.Tcp
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Route) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Route_Http)(nil),
		(*Route_Tcp)(nil),
	}
}

// A discoverd service target.
type Route_ServiceTarget struct {
	// Required. The discoverd service name to route requests to.
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Route to the service leader.
	Leader bool `protobuf:"varint,2,opt,name=leader,proto3" json:"leader,omitempty"`
	// Wait for in-flight requests to this target to finish before backends are terminated.
	DrainBackends        bool     `protobuf:"varint,3,opt,name=drain_backends,json=drainBackends,proto3" json:"drain_backends,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Route_ServiceTarget) Reset()         { *m = Route_ServiceTarget{} }
func (m *Route_ServiceTarget) String() string { return proto.CompactTextString(m) }
func (*Route_ServiceTarget) ProtoMessage()    {}
func (*Route_ServiceTarget) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{16, 0}
}

func (m *Route_ServiceTarget) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Route_ServiceTarget.Unmarshal(m, b)
}
func (m *Route_ServiceTarget) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Route_ServiceTarget.Marshal(b, m, deterministic)
}
func (m *Route_ServiceTarget) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Route_ServiceTarget.Merge(m, src)
}
func (m *Route_ServiceTarget) XXX_Size() int {
	return xxx_messageInfo_Route_ServiceTarget.Size(m)
}
func (m *Route_ServiceTarget) XXX_DiscardUnknown() {
	xxx_messageInfo_Route_ServiceTarget.DiscardUnknown(m)
}

var xxx_messageInfo_Route_ServiceTarget proto.InternalMessageInfo

func (m *Route_ServiceTarget) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *Route_ServiceTarget) GetLeader() bool {
	if m != nil {
		return m.Leader
	}
	return false
}

func (m *Route_ServiceTarget) GetDrainBackends() bool {
	if m != nil {
		return m.DrainBackends
	}
	return false
}

// The TLS configuration for a route.
type Route_TLS struct {
	// Required. The certificate to use for TLS handshakes with this route.
	Certificate          *Certificate `protobuf:"bytes,1,opt,name=certificate,proto3" json:"certificate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Route_TLS) Reset()         { *m = Route_TLS{} }
func (m *Route_TLS) String() string { return proto.CompactTextString(m) }
func (*Route_TLS) ProtoMessage()    {}
func (*Route_TLS) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{16, 1}
}

func (m *Route_TLS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Route_TLS.Unmarshal(m, b)
}
func (m *Route_TLS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Route_TLS.Marshal(b, m, deterministic)
}
func (m *Route_TLS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Route_TLS.Merge(m, src)
}
func (m *Route_TLS) XXX_Size() int {
	return xxx_messageInfo_Route_TLS.Size(m)
}
func (m *Route_TLS) XXX_DiscardUnknown() {
	xxx_messageInfo_Route_TLS.DiscardUnknown(m)
}

var xxx_messageInfo_Route_TLS proto.InternalMessageInfo

func (m *Route_TLS) GetCertificate() *Certificate {
	if m != nil {
		return m.Certificate
	}
	return nil
}

type Route_HTTP struct {
	// Required. The name of the server that this route matches. May contain up
	// to 10 wildcard labels for plaintext HTTP routes or a single wildcard
	// label for TLS routes, followed by one or more non-wildcard labels. This
	// is matched against SNI to choose the TLS configuration and the Host
	// header to select the route.
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// The HTTP path prefix to match against. Defaults to the root path `/`. To
	// create a route with a non-root path prefix, a root path route must already
	// exist for the same listener and domain, which will be used for the TLS and
	// HSTS configuration. Trailing slashes are stripped and only full path
	// segments are matched. The full unstripped path is sent in requests to the
	// target.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// The TLS configuration for the route.
	Tls *Route_TLS `protobuf:"bytes,3,opt,name=tls,proto3" json:"tls,omitempty"`
	// Enables best-effort session-backend stickiness using an encrypted cookie set
	// and managed by the router that will send requests containing the cookie to
	// the same backend instance. Incompatible with RedirectTarget.
	StickySessions       *Route_HTTP_StickySessions `protobuf:"bytes,4,opt,name=sticky_sessions,json=stickySessions,proto3" json:"sticky_sessions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *Route_HTTP) Reset()         { *m = Route_HTTP{} }
func (m *Route_HTTP) String() string { return proto.CompactTextString(m) }
func (*Route_HTTP) ProtoMessage()    {}
func (*Route_HTTP) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{16, 2}
}

func (m *Route_HTTP) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Route_HTTP.Unmarshal(m, b)
}
func (m *Route_HTTP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Route_HTTP.Marshal(b, m, deterministic)
}
func (m *Route_HTTP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Route_HTTP.Merge(m, src)
}
func (m *Route_HTTP) XXX_Size() int {
	return xxx_messageInfo_Route_HTTP.Size(m)
}
func (m *Route_HTTP) XXX_DiscardUnknown() {
	xxx_messageInfo_Route_HTTP.DiscardUnknown(m)
}

var xxx_messageInfo_Route_HTTP proto.InternalMessageInfo

func (m *Route_HTTP) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *Route_HTTP) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Route_HTTP) GetTls() *Route_TLS {
	if m != nil {
		return m.Tls
	}
	return nil
}

func (m *Route_HTTP) GetStickySessions() *Route_HTTP_StickySessions {
	if m != nil {
		return m.StickySessions
	}
	return nil
}

// Sticky session configuration. Currently there are no configuration options.
type Route_HTTP_StickySessions struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Route_HTTP_StickySessions) Reset()         { *m = Route_HTTP_StickySessions{} }
func (m *Route_HTTP_StickySessions) String() string { return proto.CompactTextString(m) }
func (*Route_HTTP_StickySessions) ProtoMessage()    {}
func (*Route_HTTP_StickySessions) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{16, 2, 0}
}

func (m *Route_HTTP_StickySessions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Route_HTTP_StickySessions.Unmarshal(m, b)
}
func (m *Route_HTTP_StickySessions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Route_HTTP_StickySessions.Marshal(b, m, deterministic)
}
func (m *Route_HTTP_StickySessions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Route_HTTP_StickySessions.Merge(m, src)
}
func (m *Route_HTTP_StickySessions) XXX_Size() int {
	return xxx_messageInfo_Route_HTTP_StickySessions.Size(m)
}
func (m *Route_HTTP_StickySessions) XXX_DiscardUnknown() {
	xxx_messageInfo_Route_HTTP_StickySessions.DiscardUnknown(m)
}

var xxx_messageInfo_Route_HTTP_StickySessions proto.InternalMessageInfo

type Route_TCP struct {
	// The TCP port configuration for the route. Required and only valid for TCP
	// listeners.
	Port                 *Route_TCPPort `protobuf:"bytes,1,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Route_TCP) Reset()         { *m = Route_TCP{} }
func (m *Route_TCP) String() string { return proto.CompactTextString(m) }
func (*Route_TCP) ProtoMessage()    {}
func (*Route_TCP) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{16, 3}
}

func (m *Route_TCP) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Route_TCP.Unmarshal(m, b)
}
func (m *Route_TCP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Route_TCP.Marshal(b, m, deterministic)
}
func (m *Route_TCP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Route_TCP.Merge(m, src)
}
func (m *Route_TCP) XXX_Size() int {
	return xxx_messageInfo_Route_TCP.Size(m)
}
func (m *Route_TCP) XXX_DiscardUnknown() {
	xxx_messageInfo_Route_TCP.DiscardUnknown(m)
}

var xxx_messageInfo_Route_TCP proto.InternalMessageInfo

func (m *Route_TCP) GetPort() *Route_TCPPort {
	if m != nil {
		return m.Port
	}
	return nil
}

type Route_TCPPort struct {
	// The TCP port to bind to. If unspecified, a port will be automatically chosen
	// during route creation and provided in the response.
	Port                 uint32   `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Route_TCPPort) Reset()         { *m = Route_TCPPort{} }
func (m *Route_TCPPort) String() string { return proto.CompactTextString(m) }
func (*Route_TCPPort) ProtoMessage()    {}
func (*Route_TCPPort) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{16, 4}
}

func (m *Route_TCPPort) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Route_TCPPort.Unmarshal(m, b)
}
func (m *Route_TCPPort) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Route_TCPPort.Marshal(b, m, deterministic)
}
func (m *Route_TCPPort) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Route_TCPPort.Merge(m, src)
}
func (m *Route_TCPPort) XXX_Size() int {
	return xxx_messageInfo_Route_TCPPort.Size(m)
}
func (m *Route_TCPPort) XXX_DiscardUnknown() {
	xxx_messageInfo_Route_TCPPort.DiscardUnknown(m)
}

var xxx_messageInfo_Route_TCPPort proto.InternalMessageInfo

func (m *Route_TCPPort) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

// A TLS key.
type Key struct {
	// The unique identifier of this TLS key.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The algorithm used by this TLS key.
	Algorithm Key_Algorithm `protobuf:"varint,2,opt,name=algorithm,proto3,enum=flynn.api.v1.Key_Algorithm" json:"algorithm,omitempty"`
	// The certificates that reference this TLS key.
	Certificates []string `protobuf:"bytes,3,rep,name=certificates,proto3" json:"certificates,omitempty"`
	// The timestamp when this TLS key was created.
	CreateTime           *timestamp.Timestamp `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Key) Reset()         { *m = Key{} }
func (m *Key) String() string { return proto.CompactTextString(m) }
func (*Key) ProtoMessage()    {}
func (*Key) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{17}
}

func (m *Key) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Key.Unmarshal(m, b)
}
func (m *Key) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Key.Marshal(b, m, deterministic)
}
func (m *Key) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Key.Merge(m, src)
}
func (m *Key) XXX_Size() int {
	return xxx_messageInfo_Key.Size(m)
}
func (m *Key) XXX_DiscardUnknown() {
	xxx_messageInfo_Key.DiscardUnknown(m)
}

var xxx_messageInfo_Key proto.InternalMessageInfo

func (m *Key) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Key) GetAlgorithm() Key_Algorithm {
	if m != nil {
		return m.Algorithm
	}
	return Key_KEY_ALG_UNSPECIFIED
}

func (m *Key) GetCertificates() []string {
	if m != nil {
		return m.Certificates
	}
	return nil
}

func (m *Key) GetCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

type Certificate struct {
	// Types that are valid to be assigned to Certificate:
	//	*Certificate_Managed
	//	*Certificate_Static
	Certificate          isCertificate_Certificate `protobuf_oneof:"certificate"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *Certificate) Reset()         { *m = Certificate{} }
func (m *Certificate) String() string { return proto.CompactTextString(m) }
func (*Certificate) ProtoMessage()    {}
func (*Certificate) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{18}
}

func (m *Certificate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Certificate.Unmarshal(m, b)
}
func (m *Certificate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Certificate.Marshal(b, m, deterministic)
}
func (m *Certificate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Certificate.Merge(m, src)
}
func (m *Certificate) XXX_Size() int {
	return xxx_messageInfo_Certificate.Size(m)
}
func (m *Certificate) XXX_DiscardUnknown() {
	xxx_messageInfo_Certificate.DiscardUnknown(m)
}

var xxx_messageInfo_Certificate proto.InternalMessageInfo

type isCertificate_Certificate interface {
	isCertificate_Certificate()
}

type Certificate_Managed struct {
	Managed *ManagedCertificate `protobuf:"bytes,1,opt,name=managed,proto3,oneof"`
}

type Certificate_Static struct {
	Static *StaticCertificate `protobuf:"bytes,2,opt,name=static,proto3,oneof"`
}

func (*Certificate_Managed) isCertificate_Certificate() {}

func (*Certificate_Static) isCertificate_Certificate() {}

func (m *Certificate) GetCertificate() isCertificate_Certificate {
	if m != nil {
		return m.Certificate
	}
	return nil
}

func (m *Certificate) GetManaged() *ManagedCertificate {
	if x, ok := m.GetCertificate().(*Certificate_Managed); ok {
		return x.Managed
	}
	return nil
}

func (m *Certificate) GetStatic() *StaticCertificate {
	if x, ok := m.GetCertificate().(*Certificate_Static); ok {
		return x.Static
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Certificate) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Certificate_Managed)(nil),
		(*Certificate_Static)(nil),
	}
}

// An existing TLS certificate.
type StaticCertificate struct {
	// Required. A list of DER-encoded X.509 certificates, composing a chain of
	// exactly one leaf (non-CA/intermediate) certificate followed by zero or
	// more intermediate CA certificates that may be used to form a valid trust
	// chain from client platform trusted roots to the leaf.
	Chain [][]byte `protobuf:"bytes,1,rep,name=chain,proto3" json:"chain,omitempty"`
	// By default a variety of checks are performed before creating
	// a certificate. When no_strict is set to true, the certificate chain will
	// be accepted as-is with no modification, and without performing additional
	// checks. When set, the only preconditions are that the leaf certificate
	// must be the first certificate in the chain.
	NoStrict bool `protobuf:"varint,2,opt,name=no_strict,json=noStrict,proto3" json:"no_strict,omitempty"`
	// The unique DNS names included in the leaf certificate Subject
	// Alternative Names.
	Domains []string `protobuf:"bytes,3,rep,name=domains,proto3" json:"domains,omitempty"`
	// The status of the certificate chain. This reflects revocation and
	// validation errors in the chain, it does not indicate compatiblity with any
	// client or platform.
	Status StaticCertificate_Status `protobuf:"varint,4,opt,name=status,proto3,enum=flynn.api.v1.StaticCertificate_Status" json:"status,omitempty"`
	// A human-readable status description, only set when the status is not VALID.
	StatusDetail string `protobuf:"bytes,5,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`
	// The issuer organization of the leaf certificate.
	Issuer string `protobuf:"bytes,6,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// The key algorithm used in the leaf certificate.
	KeyAlgorithm Key_Algorithm `protobuf:"varint,7,opt,name=key_algorithm,json=keyAlgorithm,proto3,enum=flynn.api.v1.Key_Algorithm" json:"key_algorithm,omitempty"`
	// The notBefore timestamp from the leaf certificate, indicating the start of
	// the validity period.
	NotBefore *timestamp.Timestamp `protobuf:"bytes,8,opt,name=not_before,json=notBefore,proto3" json:"not_before,omitempty"`
	// The notBefore timestamp from the leaf certificate, when the leaf
	// certificate expires.
	NotAfter *timestamp.Timestamp `protobuf:"bytes,9,opt,name=not_after,json=notAfter,proto3" json:"not_after,omitempty"`
	// When true, a TLS Feature extension is included which specifies that an OCSP
	// staple must be included in all TLS handshakes with this certificate.
	OcspMustStaple bool `protobuf:"varint,10,opt,name=ocsp_must_staple,json=ocspMustStaple,proto3" json:"ocsp_must_staple,omitempty"`
	// The SHA-256 hash of the DER-encoded leaf certificate. Multiple certificate
	// resources may have the same fingerprint if they have a different chain.
	LeafFingerprint []byte `protobuf:"bytes,11,opt,name=leaf_fingerprint,json=leafFingerprint,proto3" json:"leaf_fingerprint,omitempty"`
	// The SHA-256 hash of the DER-encoded leaf certificate Subject Public Key
	// Information. Multiple certificate resources will have the same fingerprint
	// if they share the same keypair.
	SpkiFingerprint []byte `protobuf:"bytes,12,opt,name=spki_fingerprint,json=spkiFingerprint,proto3" json:"spki_fingerprint,omitempty"`
	// An opaque 32-byte fingerprint that uniquely identifies the certificate
	// chain. This is used internally for duplicate detection, and will be the
	// same if a certificate is deleted and recreated with the exact same chain.
	ChainFingerprint []byte `protobuf:"bytes,13,opt,name=chain_fingerprint,json=chainFingerprint,proto3" json:"chain_fingerprint,omitempty"`
	// The timestamp when this certificate was created.
	CreateTime           *timestamp.Timestamp `protobuf:"bytes,14,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *StaticCertificate) Reset()         { *m = StaticCertificate{} }
func (m *StaticCertificate) String() string { return proto.CompactTextString(m) }
func (*StaticCertificate) ProtoMessage()    {}
func (*StaticCertificate) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{19}
}

func (m *StaticCertificate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StaticCertificate.Unmarshal(m, b)
}
func (m *StaticCertificate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StaticCertificate.Marshal(b, m, deterministic)
}
func (m *StaticCertificate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StaticCertificate.Merge(m, src)
}
func (m *StaticCertificate) XXX_Size() int {
	return xxx_messageInfo_StaticCertificate.Size(m)
}
func (m *StaticCertificate) XXX_DiscardUnknown() {
	xxx_messageInfo_StaticCertificate.DiscardUnknown(m)
}

var xxx_messageInfo_StaticCertificate proto.InternalMessageInfo

func (m *StaticCertificate) GetChain() [][]byte {
	if m != nil {
		return m.Chain
	}
	return nil
}

func (m *StaticCertificate) GetNoStrict() bool {
	if m != nil {
		return m.NoStrict
	}
	return false
}

func (m *StaticCertificate) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *StaticCertificate) GetStatus() StaticCertificate_Status {
	if m != nil {
		return m.Status
	}
	return StaticCertificate_STATUS_UNSPECIFIED
}

func (m *StaticCertificate) GetStatusDetail() string {
	if m != nil {
		return m.StatusDetail
	}
	return ""
}

func (m *StaticCertificate) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *StaticCertificate) GetKeyAlgorithm() Key_Algorithm {
	if m != nil {
		return m.KeyAlgorithm
	}
	return Key_KEY_ALG_UNSPECIFIED
}

func (m *StaticCertificate) GetNotBefore() *timestamp.Timestamp {
	if m != nil {
		return m.NotBefore
	}
	return nil
}

func (m *StaticCertificate) GetNotAfter() *timestamp.Timestamp {
	if m != nil {
		return m.NotAfter
	}
	return nil
}

func (m *StaticCertificate) GetOcspMustStaple() bool {
	if m != nil {
		return m.OcspMustStaple
	}
	return false
}

func (m *StaticCertificate) GetLeafFingerprint() []byte {
	if m != nil {
		return m.LeafFingerprint
	}
	return nil
}

func (m *StaticCertificate) GetSpkiFingerprint() []byte {
	if m != nil {
		return m.SpkiFingerprint
	}
	return nil
}

func (m *StaticCertificate) GetChainFingerprint() []byte {
	if m != nil {
		return m.ChainFingerprint
	}
	return nil
}

func (m *StaticCertificate) GetCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

// An automatically provisioned TLS certificate.
type ManagedCertificate struct {
	// The immutable list of domains included in this certificate as Subject
	// Alternative Names.
	Domains []string `protobuf:"bytes,1,rep,name=domains,proto3" json:"domains,omitempty"`
	// Configuration for the certificate.
	Config *ManagedCertificate_Config `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	// The certificate issuance status. The initial value is PENDING.
	Status ManagedCertificate_Status `protobuf:"varint,3,opt,name=status,proto3,enum=flynn.api.v1.ManagedCertificate_Status" json:"status,omitempty"`
	// Errors encountered during issuance, if any. This will only be populated if
	// the status is FAILED.
	Errors []*ManagedCertificate_Error `protobuf:"bytes,4,rep,name=errors,proto3" json:"errors,omitempty"`
	// The current certificate details. This will not be set until the certificate
	// is issued.
	Certificate *StaticCertificate `protobuf:"bytes,5,opt,name=certificate,proto3" json:"certificate,omitempty"`
	// The timestamp of the last modification of this resource. It is modified
	// each time at least one field is changed.
	UpdateTime           *timestamp.Timestamp `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ManagedCertificate) Reset()         { *m = ManagedCertificate{} }
func (m *ManagedCertificate) String() string { return proto.CompactTextString(m) }
func (*ManagedCertificate) ProtoMessage()    {}
func (*ManagedCertificate) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{20}
}

func (m *ManagedCertificate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ManagedCertificate.Unmarshal(m, b)
}
func (m *ManagedCertificate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ManagedCertificate.Marshal(b, m, deterministic)
}
func (m *ManagedCertificate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManagedCertificate.Merge(m, src)
}
func (m *ManagedCertificate) XXX_Size() int {
	return xxx_messageInfo_ManagedCertificate.Size(m)
}
func (m *ManagedCertificate) XXX_DiscardUnknown() {
	xxx_messageInfo_ManagedCertificate.DiscardUnknown(m)
}

var xxx_messageInfo_ManagedCertificate proto.InternalMessageInfo

func (m *ManagedCertificate) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *ManagedCertificate) GetConfig() *ManagedCertificate_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *ManagedCertificate) GetStatus() ManagedCertificate_Status {
	if m != nil {
		return m.Status
	}
	return ManagedCertificate_STATUS_UNSPECIFIED
}

func (m *ManagedCertificate) GetErrors() []*ManagedCertificate_Error {
	if m != nil {
		return m.Errors
	}
	return nil
}

func (m *ManagedCertificate) GetCertificate() *StaticCertificate {
	if m != nil {
		return m.Certificate
	}
	return nil
}

func (m *ManagedCertificate) GetUpdateTime() *timestamp.Timestamp {
	if m != nil {
		return m.UpdateTime
	}
	return nil
}

// A single DNS name that will be a Subject Alternative Name in the
// certificate.
type ManagedCertificate_Domain struct {
	// Required. The domain name to include in the certificate.
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// The validation method to use to confirm domain control.
	ValidationMethod     ManagedCertificate_ValidationMethod `protobuf:"varint,2,opt,name=validation_method,json=validationMethod,proto3,enum=flynn.api.v1.ManagedCertificate_ValidationMethod" json:"validation_method,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *ManagedCertificate_Domain) Reset()         { *m = ManagedCertificate_Domain{} }
func (m *ManagedCertificate_Domain) String() string { return proto.CompactTextString(m) }
func (*ManagedCertificate_Domain) ProtoMessage()    {}
func (*ManagedCertificate_Domain) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{20, 0}
}

func (m *ManagedCertificate_Domain) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ManagedCertificate_Domain.Unmarshal(m, b)
}
func (m *ManagedCertificate_Domain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ManagedCertificate_Domain.Marshal(b, m, deterministic)
}
func (m *ManagedCertificate_Domain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManagedCertificate_Domain.Merge(m, src)
}
func (m *ManagedCertificate_Domain) XXX_Size() int {
	return xxx_messageInfo_ManagedCertificate_Domain.Size(m)
}
func (m *ManagedCertificate_Domain) XXX_DiscardUnknown() {
	xxx_messageInfo_ManagedCertificate_Domain.DiscardUnknown(m)
}

var xxx_messageInfo_ManagedCertificate_Domain proto.InternalMessageInfo

func (m *ManagedCertificate_Domain) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *ManagedCertificate_Domain) GetValidationMethod() ManagedCertificate_ValidationMethod {
	if m != nil {
		return m.ValidationMethod
	}
	return ManagedCertificate_METHOD_UNSPECIFIED
}

// Configuration for the certificate.
type ManagedCertificate_Config struct {
	// Required. One or more DNS names to include in the certificate as Subject
	// Alternative Names.
	Domains []*ManagedCertificate_Domain `protobuf:"bytes,1,rep,name=domains,proto3" json:"domains,omitempty"`
	// The key algorithm to use for the certificate. If unspecified, defaults to
	// KEY_ALG_ECC_P256.
	KeyAlgorithm         Key_Algorithm `protobuf:"varint,2,opt,name=key_algorithm,json=keyAlgorithm,proto3,enum=flynn.api.v1.Key_Algorithm" json:"key_algorithm,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ManagedCertificate_Config) Reset()         { *m = ManagedCertificate_Config{} }
func (m *ManagedCertificate_Config) String() string { return proto.CompactTextString(m) }
func (*ManagedCertificate_Config) ProtoMessage()    {}
func (*ManagedCertificate_Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{20, 1}
}

func (m *ManagedCertificate_Config) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ManagedCertificate_Config.Unmarshal(m, b)
}
func (m *ManagedCertificate_Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ManagedCertificate_Config.Marshal(b, m, deterministic)
}
func (m *ManagedCertificate_Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManagedCertificate_Config.Merge(m, src)
}
func (m *ManagedCertificate_Config) XXX_Size() int {
	return xxx_messageInfo_ManagedCertificate_Config.Size(m)
}
func (m *ManagedCertificate_Config) XXX_DiscardUnknown() {
	xxx_messageInfo_ManagedCertificate_Config.DiscardUnknown(m)
}

var xxx_messageInfo_ManagedCertificate_Config proto.InternalMessageInfo

func (m *ManagedCertificate_Config) GetDomains() []*ManagedCertificate_Domain {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *ManagedCertificate_Config) GetKeyAlgorithm() Key_Algorithm {
	if m != nil {
		return m.KeyAlgorithm
	}
	return Key_KEY_ALG_UNSPECIFIED
}

// An error encountered during certificate issuance.
type ManagedCertificate_Error struct {
	// The error type, usually one specified by ACME.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Human-readable error details.
	Detail               string   `protobuf:"bytes,2,opt,name=detail,proto3" json:"detail,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ManagedCertificate_Error) Reset()         { *m = ManagedCertificate_Error{} }
func (m *ManagedCertificate_Error) String() string { return proto.CompactTextString(m) }
func (*ManagedCertificate_Error) ProtoMessage()    {}
func (*ManagedCertificate_Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{20, 2}
}

func (m *ManagedCertificate_Error) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ManagedCertificate_Error.Unmarshal(m, b)
}
func (m *ManagedCertificate_Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ManagedCertificate_Error.Marshal(b, m, deterministic)
}
func (m *ManagedCertificate_Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManagedCertificate_Error.Merge(m, src)
}
func (m *ManagedCertificate_Error) XXX_Size() int {
	return xxx_messageInfo_ManagedCertificate_Error.Size(m)
}
func (m *ManagedCertificate_Error) XXX_DiscardUnknown() {
	xxx_messageInfo_ManagedCertificate_Error.DiscardUnknown(m)
}

var xxx_messageInfo_ManagedCertificate_Error proto.InternalMessageInfo

func (m *ManagedCertificate_Error) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ManagedCertificate_Error) GetDetail() string {
	if m != nil {
		return m.Detail
	}
	return ""
}

func init() {
	proto.RegisterEnum("flynn.api.v1.RouteChange_Action", RouteChange_Action_name, RouteChange_Action_value)
	proto.RegisterEnum("flynn.api.v1.Key_Algorithm", Key_Algorithm_name, Key_Algorithm_value)
	proto.RegisterEnum("flynn.api.v1.StaticCertificate_Status", StaticCertificate_Status_name, StaticCertificate_Status_value)
	proto.RegisterEnum("flynn.api.v1.ManagedCertificate_ValidationMethod", ManagedCertificate_ValidationMethod_name, ManagedCertificate_ValidationMethod_value)
	proto.RegisterEnum("flynn.api.v1.ManagedCertificate_Status", ManagedCertificate_Status_name, ManagedCertificate_Status_value)
	proto.RegisterType((*SetRoutesRequest)(nil), "flynn.api.v1.SetRoutesRequest")
	proto.RegisterType((*SetRoutesResponse)(nil), "flynn.api.v1.SetRoutesResponse")
	proto.RegisterType((*ListAppRoutesRequest)(nil), "flynn.api.v1.ListAppRoutesRequest")
	proto.RegisterType((*ListAppRoutesResponse)(nil), "flynn.api.v1.ListAppRoutesResponse")
	proto.RegisterType((*ListKeysRequest)(nil), "flynn.api.v1.ListKeysRequest")
	proto.RegisterType((*ListKeysResponse)(nil), "flynn.api.v1.ListKeysResponse")
	proto.RegisterType((*GetKeyRequest)(nil), "flynn.api.v1.GetKeyRequest")
	proto.RegisterType((*GetKeyResponse)(nil), "flynn.api.v1.GetKeyResponse")
	proto.RegisterType((*CreateKeyRequest)(nil), "flynn.api.v1.CreateKeyRequest")
	proto.RegisterType((*CreateKeyResponse)(nil), "flynn.api.v1.CreateKeyResponse")
	proto.RegisterType((*DeleteKeyRequest)(nil), "flynn.api.v1.DeleteKeyRequest")
	proto.RegisterType((*DeleteKeyResponse)(nil), "flynn.api.v1.DeleteKeyResponse")
	proto.RegisterType((*UpdateManagedCertificateRequest)(nil), "flynn.api.v1.UpdateManagedCertificateRequest")
	proto.RegisterType((*UpdateManagedCertificateResponse)(nil), "flynn.api.v1.UpdateManagedCertificateResponse")
	proto.RegisterType((*AppRoutes)(nil), "flynn.api.v1.AppRoutes")
	proto.RegisterType((*RouteChange)(nil), "flynn.api.v1.RouteChange")
	proto.RegisterType((*Route)(nil), "flynn.api.v1.Route")
	proto.RegisterType((*Route_ServiceTarget)(nil), "flynn.api.v1.Route.ServiceTarget")
	proto.RegisterType((*Route_TLS)(nil), "flynn.api.v1.Route.TLS")
	proto.RegisterType((*Route_HTTP)(nil), "flynn.api.v1.Route.HTTP")
	proto.RegisterType((*Route_HTTP_StickySessions)(nil), "flynn.api.v1.Route.HTTP.StickySessions")
	proto.RegisterType((*Route_TCP)(nil), "flynn.api.v1.Route.TCP")
	proto.RegisterType((*Route_TCPPort)(nil), "flynn.api.v1.Route.TCPPort")
	proto.RegisterType((*Key)(nil), "flynn.api.v1.Key")
	proto.RegisterType((*Certificate)(nil), "flynn.api.v1.Certificate")
	proto.RegisterType((*StaticCertificate)(nil), "flynn.api.v1.StaticCertificate")
	proto.RegisterType((*ManagedCertificate)(nil), "flynn.api.v1.ManagedCertificate")
	proto.RegisterType((*ManagedCertificate_Domain)(nil), "flynn.api.v1.ManagedCertificate.Domain")
	proto.RegisterType((*ManagedCertificate_Config)(nil), "flynn.api.v1.ManagedCertificate.Config")
	proto.RegisterType((*ManagedCertificate_Error)(nil), "flynn.api.v1.ManagedCertificate.Error")
}

func init() { proto.RegisterFile("router.proto", fileDescriptor_367072455c71aedc) }

var fileDescriptor_367072455c71aedc = []byte{
	// 1753 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0xdd, 0x72, 0xdb, 0xc6,
	0x15, 0x16, 0x44, 0x11, 0x12, 0x0f, 0x7f, 0x0c, 0xae, 0xdd, 0x98, 0x65, 0x7e, 0xa4, 0xc0, 0x13,
	0xc7, 0xae, 0xa7, 0x74, 0x2c, 0xa7, 0xae, 0x35, 0xe9, 0xb8, 0xa5, 0x48, 0xc8, 0x52, 0x29, 0x4b,
	0x9c, 0x05, 0xe4, 0x49, 0x72, 0x51, 0xcc, 0x8a, 0x5c, 0x4a, 0x18, 0x51, 0x00, 0x02, 0x2c, 0x35,
	0xe5, 0xf4, 0xa6, 0xd7, 0x9d, 0xf4, 0xb2, 0xbd, 0xeb, 0xc3, 0xf4, 0x11, 0xfa, 0x08, 0xbd, 0xe9,
	0x43, 0xf4, 0xaa, 0xb3, 0x3f, 0x20, 0x01, 0x88, 0x34, 0xed, 0x4e, 0xee, 0xb0, 0xdf, 0x7e, 0xe7,
	0x67, 0xcf, 0x9e, 0xb3, 0xbb, 0x07, 0x50, 0x89, 0x82, 0x09, 0xa3, 0x51, 0x2b, 0x8c, 0x02, 0x16,
	0xa0, 0xca, 0x68, 0x3c, 0xf5, 0xfd, 0x16, 0x09, 0xbd, 0xd6, 0xcd, 0xb3, 0xe6, 0xf6, 0x45, 0x10,
	0x5c, 0x8c, 0xe9, 0x53, 0x31, 0x77, 0x3e, 0x19, 0x3d, 0x65, 0xde, 0x35, 0x8d, 0x19, 0xb9, 0x0e,
	0x25, 0xdd, 0xfc, 0x8b, 0x06, 0x86, 0x4d, 0x19, 0xe6, 0x2a, 0x62, 0x4c, 0x7f, 0x98, 0xd0, 0x98,
	0xa1, 0x17, 0x00, 0x24, 0x0c, 0x5d, 0xa1, 0x37, 0x6e, 0x68, 0x3b, 0x85, 0x47, 0xe5, 0xdd, 0xfb,
	0xad, 0xb4, 0xe2, 0x56, 0x3b, 0x0c, 0x95, 0x4c, 0x89, 0x24, 0x9f, 0xe8, 0x3e, 0x6c, 0x0e, 0xa3,
	0xa9, 0x1b, 0x4d, 0xfc, 0xc6, 0xfa, 0x8e, 0xf6, 0x68, 0x0b, 0xeb, 0xc3, 0x68, 0x8a, 0x27, 0x3e,
	0xfa, 0x02, 0x6a, 0xf4, 0x8f, 0x21, 0x1d, 0x30, 0x3a, 0x74, 0x63, 0x46, 0x18, 0x6d, 0x14, 0x76,
	0xb4, 0x47, 0x15, 0x5c, 0x4d, 0x50, 0x9b, 0x83, 0xe6, 0xdf, 0x35, 0xa8, 0xa7, 0x9c, 0x89, 0xc3,
	0xc0, 0x8f, 0x29, 0x7a, 0x05, 0x55, 0xe1, 0x89, 0x3b, 0xb8, 0x24, 0xfe, 0xc5, 0xcc, 0xa1, 0x9f,
	0x67, 0x1d, 0x12, 0x42, 0x1d, 0xc1, 0xc0, 0x32, 0x22, 0x72, 0xf0, 0x0e, 0xaf, 0x1e, 0x81, 0x41,
	0xc2, 0x70, 0xec, 0xd1, 0xa1, 0xcb, 0x82, 0x8c, 0x5f, 0x35, 0x85, 0x3b, 0x81, 0x74, 0xec, 0x17,
	0x70, 0xef, 0xd8, 0x8b, 0xd9, 0x7c, 0xd1, 0x2a, 0x50, 0x08, 0x36, 0x48, 0x18, 0x4a, 0x8f, 0x4a,
	0x58, 0x7c, 0x9b, 0x14, 0x7e, 0x96, 0xe3, 0xaa, 0x75, 0xfc, 0xbf, 0x51, 0xbd, 0x07, 0x45, 0xe9,
	0xdb, 0xba, 0xf0, 0x4d, 0x0e, 0xcc, 0x3a, 0xdc, 0xe1, 0x66, 0x7a, 0x74, 0x9a, 0x78, 0x63, 0xee,
	0x81, 0x31, 0x87, 0x94, 0xd1, 0x2f, 0x60, 0xe3, 0x8a, 0x4e, 0x13, 0x73, 0xf5, 0xac, 0xb9, 0x1e,
	0x9d, 0x62, 0x31, 0x6d, 0x3e, 0x80, 0xea, 0x6b, 0xca, 0x25, 0x53, 0x2b, 0xf3, 0xc9, 0x35, 0x6d,
	0x68, 0x3b, 0x1a, 0x5f, 0x19, 0xff, 0x36, 0x9f, 0x41, 0x2d, 0x21, 0x29, 0xed, 0xdb, 0x50, 0x0e,
	0x23, 0xef, 0x86, 0x30, 0xea, 0x5e, 0xd1, 0xa9, 0x20, 0x57, 0x30, 0x28, 0xa8, 0x47, 0xa7, 0xe6,
	0x73, 0x30, 0x3a, 0x11, 0x95, 0x83, 0x44, 0xf5, 0x4a, 0xa1, 0x97, 0x50, 0x4f, 0x09, 0x29, 0x53,
	0x0f, 0xa0, 0x90, 0xb0, 0x17, 0xae, 0x83, 0xcf, 0x9a, 0x0f, 0xc1, 0xe8, 0xd2, 0x31, 0xcd, 0x98,
	0x5b, 0xb4, 0x92, 0x97, 0x50, 0x4f, 0xf1, 0x3e, 0xc4, 0x02, 0x85, 0xed, 0xb3, 0x70, 0x48, 0x18,
	0x7d, 0x43, 0x7c, 0x72, 0x41, 0x87, 0x1d, 0x1a, 0x31, 0x6f, 0xe4, 0x0d, 0x08, 0xa3, 0x89, 0xc1,
	0x7d, 0x28, 0x0f, 0xe6, 0xa8, 0xd2, 0xb7, 0x93, 0xd5, 0xb7, 0x40, 0x3a, 0x2d, 0x64, 0x8e, 0x60,
	0x67, 0xb9, 0x19, 0xe5, 0xef, 0x4f, 0x61, 0xe7, 0xf7, 0x50, 0x9a, 0xe5, 0x1c, 0x32, 0xa0, 0x40,
	0xc2, 0x50, 0x05, 0x8a, 0x7f, 0xa2, 0x27, 0xa0, 0xab, 0x74, 0x5d, 0x17, 0xf9, 0x73, 0x77, 0x41,
	0xcd, 0x61, 0x45, 0x31, 0xff, 0xab, 0x41, 0x39, 0x55, 0x85, 0xe8, 0x25, 0xe8, 0x64, 0xc0, 0xbc,
	0xc0, 0x17, 0x1a, 0x6b, 0x79, 0xd7, 0x52, 0xd4, 0x56, 0x5b, 0xf0, 0xb0, 0xe2, 0x73, 0xb3, 0xe7,
	0x74, 0x14, 0x44, 0x32, 0xe5, 0x97, 0x99, 0x95, 0x14, 0xf4, 0x18, 0x8a, 0x64, 0xc4, 0x68, 0x24,
	0x4a, 0x77, 0x09, 0x57, 0x32, 0xcc, 0xef, 0x40, 0x97, 0x96, 0xd0, 0x47, 0x80, 0xda, 0x1d, 0xe7,
	0xe8, 0xf4, 0xc4, 0x3d, 0x3b, 0xb1, 0xfb, 0x56, 0xe7, 0xe8, 0xe0, 0xc8, 0xea, 0x1a, 0x6b, 0xa8,
	0x0e, 0x55, 0x85, 0x77, 0xb0, 0xd5, 0x76, 0x2c, 0x43, 0x4b, 0x41, 0x67, 0xfd, 0x2e, 0x87, 0xd6,
	0x53, 0x50, 0xd7, 0x3a, 0xb6, 0x1c, 0xcb, 0x28, 0x98, 0xff, 0x29, 0x42, 0x51, 0xd8, 0x5a, 0x94,
	0x6f, 0xe8, 0x23, 0xd0, 0x43, 0x12, 0x51, 0x9f, 0x89, 0x05, 0x95, 0xb0, 0x1a, 0xa1, 0x43, 0xa8,
	0xc5, 0x34, 0xba, 0xf1, 0x06, 0xd4, 0x65, 0x24, 0xba, 0xa0, 0x4c, 0x2d, 0xe2, 0xf3, 0x05, 0x8b,
	0x68, 0xd9, 0x92, 0xe9, 0x08, 0x22, 0xae, 0xc6, 0xe9, 0x21, 0x6a, 0xc1, 0xdd, 0xa1, 0x17, 0x93,
	0xf3, 0x31, 0x2f, 0x2a, 0x1a, 0xba, 0x64, 0xec, 0xdd, 0xd0, 0xb8, 0xb1, 0x21, 0x0e, 0xbc, 0xba,
	0x9a, 0xea, 0x51, 0x1a, 0xb6, 0xc5, 0x04, 0x6a, 0xc1, 0xc6, 0x25, 0x63, 0x61, 0xa3, 0x28, 0xec,
	0x35, 0x16, 0xd9, 0x3b, 0x74, 0x9c, 0xfe, 0xe1, 0x1a, 0x16, 0x3c, 0xf4, 0x04, 0x0a, 0x6c, 0x10,
	0x36, 0x74, 0x41, 0xbf, 0xbf, 0x88, 0xee, 0x74, 0x38, 0x9b, 0xb3, 0x9a, 0x3f, 0x40, 0x35, 0xe3,
	0x2c, 0xfa, 0x1c, 0x2a, 0xc9, 0x3a, 0x53, 0xb1, 0x29, 0x2b, 0xec, 0x44, 0x85, 0x68, 0x4c, 0xc9,
	0x90, 0x46, 0xc9, 0x21, 0x2d, 0x47, 0xfc, 0xea, 0x18, 0x46, 0xc4, 0xf3, 0xdd, 0x73, 0x32, 0xb8,
	0xa2, 0xfe, 0x30, 0x16, 0x21, 0xda, 0xc2, 0x55, 0x81, 0xee, 0x2b, 0xb0, 0xb9, 0x0f, 0x05, 0xe7,
	0xd8, 0x46, 0xdf, 0x2c, 0xaa, 0x89, 0xdc, 0x4d, 0xb1, 0xac, 0x18, 0x9a, 0xff, 0xd4, 0x60, 0x83,
	0x2f, 0x9a, 0xfb, 0x32, 0x0c, 0xae, 0x89, 0xe7, 0x2b, 0x47, 0xd5, 0x88, 0x6f, 0x6d, 0x48, 0xd8,
	0xa5, 0xda, 0x44, 0xf1, 0x8d, 0x1e, 0x43, 0x81, 0x8d, 0x63, 0xb5, 0x6f, 0x8b, 0x03, 0x73, 0x6c,
	0x63, 0xce, 0x41, 0x7d, 0xb8, 0x13, 0x33, 0x6f, 0x70, 0x35, 0x75, 0x63, 0x1a, 0xc7, 0x5e, 0xe0,
	0xcb, 0xfd, 0x29, 0xef, 0x7e, 0xb9, 0x2c, 0xfc, 0x2d, 0x5b, 0xf0, 0x6d, 0x45, 0xc7, 0xb5, 0x38,
	0x33, 0x6e, 0x1a, 0x50, 0xcb, 0x32, 0x9a, 0x2f, 0xa0, 0xe0, 0x74, 0xfa, 0xe8, 0x29, 0x6c, 0x84,
	0x41, 0xc4, 0x54, 0x00, 0x3e, 0x5e, 0xb2, 0x5f, 0xfd, 0x20, 0x62, 0x58, 0x10, 0x9b, 0x9f, 0xc2,
	0xa6, 0x02, 0xc4, 0x2a, 0x13, 0xd9, 0xaa, 0x9c, 0xde, 0xdf, 0x02, 0x7d, 0x10, 0xf8, 0x23, 0xef,
	0xc2, 0xfc, 0xc7, 0x3a, 0x14, 0x7a, 0x74, 0xba, 0x30, 0xcd, 0xf7, 0xa0, 0x44, 0xc6, 0x17, 0x41,
	0xe4, 0xb1, 0xcb, 0x6b, 0x11, 0xa4, 0x5a, 0xde, 0x74, 0x8f, 0x4e, 0x5b, 0xed, 0x84, 0x82, 0xe7,
	0x6c, 0x64, 0x42, 0x25, 0xb5, 0x15, 0x3c, 0x9e, 0xfc, 0x46, 0xcd, 0x60, 0x62, 0x73, 0xc5, 0xbd,
	0xe0, 0xf2, 0x57, 0x8c, 0x8a, 0x5d, 0xb3, 0x25, 0x9f, 0x38, 0xad, 0xe4, 0x89, 0xd3, 0x72, 0x92,
	0x27, 0x0e, 0x06, 0x49, 0xe7, 0x80, 0x39, 0x82, 0xd2, 0xcc, 0x30, 0xba, 0x0f, 0x77, 0x7b, 0xd6,
	0x77, 0x6e, 0xfb, 0xf8, 0x75, 0xae, 0xfe, 0xef, 0x81, 0x91, 0x4c, 0x58, 0x9d, 0x8e, 0xdb, 0xdf,
	0xfd, 0xd5, 0x0b, 0x43, 0x4b, 0xa3, 0xd8, 0x6e, 0xbb, 0xbb, 0x5f, 0x7d, 0xfd, 0xd2, 0x58, 0xcf,
	0xa3, 0x5f, 0x7f, 0xb5, 0xf7, 0xc2, 0x28, 0x98, 0x7f, 0xd3, 0xa0, 0x9c, 0xca, 0x30, 0xf4, 0x1b,
	0xd8, 0xbc, 0x96, 0x87, 0xf0, 0xfb, 0x9e, 0xd0, 0x87, 0x6b, 0x38, 0x11, 0x41, 0x7b, 0xa0, 0xf3,
	0xeb, 0xde, 0x1b, 0xa8, 0x93, 0x70, 0x3b, 0x2b, 0x6c, 0x8b, 0xb9, 0xac, 0xac, 0x12, 0xd8, 0xaf,
	0x66, 0x4a, 0xc1, 0xfc, 0x51, 0x87, 0xfa, 0x2d, 0x3a, 0x7f, 0x5b, 0x0c, 0x2e, 0x65, 0xa2, 0x17,
	0xf8, 0xdb, 0x42, 0x0c, 0xd0, 0xc7, 0x50, 0xf2, 0xf9, 0x83, 0x28, 0xf2, 0x06, 0x4c, 0x95, 0xe3,
	0x96, 0x1f, 0xd8, 0x62, 0x8c, 0x1a, 0xb0, 0x29, 0xcb, 0x21, 0xd9, 0xa4, 0x64, 0x88, 0x5e, 0x49,
	0x67, 0x27, 0x32, 0xad, 0x6b, 0xbb, 0x0f, 0x57, 0x38, 0x2b, 0x90, 0x49, 0x8c, 0x95, 0x14, 0x7a,
	0x00, 0x55, 0xf9, 0xe5, 0x0e, 0x29, 0x23, 0xde, 0x58, 0x1c, 0x4e, 0x25, 0x5c, 0x91, 0x60, 0x57,
	0x60, 0xbc, 0x36, 0xbd, 0x38, 0x9e, 0xd0, 0x48, 0x9c, 0x45, 0x25, 0xac, 0x46, 0xe8, 0x77, 0x50,
	0xbd, 0xa2, 0x53, 0x77, 0x9e, 0x7f, 0x9b, 0xab, 0xf3, 0xaf, 0x72, 0x45, 0xa7, 0xf3, 0xa4, 0xd8,
	0x03, 0xf0, 0x03, 0xe6, 0xaa, 0x9b, 0x67, 0x6b, 0x65, 0x76, 0x95, 0xfc, 0x80, 0xed, 0xcb, 0x3b,
	0xe8, 0xd7, 0x3c, 0x60, 0xcc, 0x95, 0xf7, 0x50, 0x69, 0xa5, 0xe4, 0x96, 0x1f, 0xb0, 0x36, 0xe7,
	0xf2, 0x27, 0x68, 0x30, 0x88, 0x43, 0xf7, 0x7a, 0x12, 0x33, 0xfe, 0x02, 0x0d, 0xc7, 0xb4, 0x01,
	0x22, 0xe0, 0x35, 0x8e, 0xbf, 0x99, 0xc4, 0xcc, 0x16, 0x28, 0x7a, 0x0c, 0xc6, 0x98, 0x92, 0x91,
	0x3b, 0xf2, 0xfc, 0x0b, 0x1a, 0x85, 0x91, 0xe7, 0xb3, 0x46, 0x59, 0x3c, 0x9d, 0xee, 0x70, 0xfc,
	0x60, 0x0e, 0x73, 0x6a, 0x1c, 0x5e, 0x79, 0x19, 0x6a, 0x45, 0x52, 0x39, 0x9e, 0xa6, 0x3e, 0x81,
	0xba, 0xd8, 0xf2, 0x0c, 0xb7, 0x2a, 0xb8, 0x86, 0x98, 0x48, 0x93, 0x73, 0xf5, 0x57, 0xfb, 0xa0,
	0xfa, 0xfb, 0x51, 0x03, 0x5d, 0xee, 0x37, 0xbf, 0x7c, 0x6d, 0xa7, 0xed, 0x9c, 0xd9, 0xb9, 0xe2,
	0x33, 0xa0, 0xa2, 0xf0, 0xb7, 0xed, 0xe3, 0xa3, 0xae, 0xa1, 0x21, 0x04, 0x35, 0x85, 0x58, 0xdf,
	0xf6, 0x8f, 0xb0, 0xd5, 0x35, 0xd6, 0x53, 0x18, 0xb6, 0xde, 0x9e, 0xf6, 0xac, 0xae, 0x51, 0x40,
	0x9f, 0x40, 0x43, 0x61, 0x07, 0x67, 0xce, 0x19, 0xb6, 0xdc, 0x93, 0x53, 0xc7, 0xdd, 0xb7, 0x0e,
	0x4e, 0xb1, 0x65, 0x6c, 0xa4, 0x24, 0x8e, 0x4e, 0xa4, 0xe6, 0xa2, 0xf9, 0x2f, 0x1d, 0xd0, 0xed,
	0xd2, 0x4b, 0x27, 0xb7, 0x96, 0x4d, 0xee, 0xdf, 0x26, 0x27, 0xa0, 0xaa, 0xc4, 0x2f, 0x57, 0x95,
	0x71, 0xab, 0x23, 0xe8, 0x58, 0x89, 0x71, 0x05, 0xaa, 0x3a, 0x0a, 0x22, 0x33, 0x57, 0x2b, 0xc8,
	0x95, 0xc7, 0x2b, 0xd0, 0x69, 0x14, 0x05, 0x11, 0x2f, 0x2f, 0xfe, 0x18, 0x7b, 0xb8, 0x52, 0x81,
	0xc5, 0xe9, 0x58, 0x49, 0xa1, 0x76, 0xf6, 0x6e, 0x2c, 0xbe, 0xd7, 0x81, 0x92, 0xb9, 0x21, 0x79,
	0x06, 0x4c, 0xc4, 0xb3, 0x54, 0x66, 0x80, 0xbe, 0x3a, 0x03, 0x24, 0x9d, 0x03, 0xcd, 0x3f, 0x6b,
	0xa0, 0x77, 0xe5, 0x45, 0xba, 0xec, 0x82, 0xfd, 0x03, 0xd4, 0x6f, 0xc8, 0xd8, 0x1b, 0x12, 0xfe,
	0x48, 0x73, 0xaf, 0x29, 0xbb, 0x0c, 0x86, 0xea, 0x22, 0x79, 0xb6, 0x72, 0xb5, 0x6f, 0x67, 0x92,
	0x6f, 0x84, 0x20, 0x36, 0x6e, 0x72, 0x48, 0xf3, 0xaf, 0x1a, 0xe8, 0x72, 0x5b, 0x50, 0x3b, 0xbb,
	0xd3, 0xef, 0xb3, 0xa1, 0xd2, 0xf9, 0x79, 0x4a, 0xdc, 0x3a, 0x72, 0xd6, 0x3f, 0xf0, 0xc8, 0x69,
	0x3e, 0x87, 0xa2, 0xd8, 0x23, 0x7e, 0x9b, 0xb2, 0x69, 0x38, 0xbb, 0x4d, 0xf9, 0xb7, 0x08, 0x92,
	0x3c, 0x07, 0xd5, 0xa3, 0x51, 0x8e, 0xcc, 0x6f, 0xc0, 0xc8, 0x2f, 0x95, 0x97, 0xd4, 0x1b, 0xcb,
	0x39, 0x3c, 0xed, 0xe6, 0x4a, 0xea, 0x0e, 0x94, 0x15, 0xde, 0x3e, 0x73, 0x4e, 0x0d, 0xcd, 0xfc,
	0x7e, 0x65, 0x15, 0xce, 0xab, 0xa5, 0x6f, 0x9d, 0x74, 0x8f, 0x4e, 0x5e, 0xcb, 0x37, 0x70, 0x52,
	0x41, 0xb6, 0x7d, 0x26, 0xca, 0x70, 0x0e, 0x1d, 0xb4, 0x8f, 0x8e, 0x79, 0x15, 0xee, 0xfe, 0x7b,
	0x03, 0x74, 0xf1, 0xb6, 0x88, 0xd0, 0x31, 0x94, 0x66, 0x8d, 0x3c, 0xfa, 0x2c, 0x97, 0x63, 0xb9,
	0xdf, 0x0d, 0xcd, 0xed, 0xa5, 0xf3, 0xaa, 0xd3, 0xf9, 0x16, 0xaa, 0x99, 0x96, 0x1a, 0x99, 0x59,
	0x89, 0x45, 0xbd, 0x79, 0xf3, 0xc1, 0x3b, 0x39, 0x4a, 0x73, 0x0f, 0xb6, 0x92, 0x96, 0x19, 0x7d,
	0x7a, 0x5b, 0x20, 0xd5, 0x5d, 0x37, 0x3f, 0x5b, 0x36, 0x2d, 0x55, 0x99, 0x6b, 0xc8, 0x02, 0x5d,
	0xf6, 0xc7, 0x28, 0x97, 0x02, 0x99, 0xd6, 0xba, 0xf9, 0xc9, 0xe2, 0xc9, 0x99, 0x9a, 0x13, 0x28,
	0xcd, 0xda, 0xdf, 0x7c, 0xec, 0xf2, 0xcd, 0x74, 0x3e, 0x76, 0xb7, 0xfa, 0x66, 0xa9, 0x6f, 0xd6,
	0xec, 0xe6, 0xf5, 0xe5, 0xbb, 0xe5, 0xbc, 0xbe, 0x5b, 0x5d, 0xb2, 0xb9, 0x86, 0xfe, 0x04, 0x8d,
	0x65, 0xbd, 0x29, 0xfa, 0x65, 0x56, 0x7c, 0x45, 0xab, 0xdc, 0x6c, 0xbd, 0x2f, 0x3d, 0x31, 0xbe,
	0x5f, 0xfc, 0xbe, 0x40, 0x42, 0xef, 0x5c, 0x17, 0x67, 0xcd, 0xf3, 0xff, 0x05, 0x00, 0x00, 0xff,
	0xff, 0xc9, 0xb0, 0x8b, 0x32, 0xfc, 0x12, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RouterClient is the client API for Router service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RouterClient interface {
	// SetRoutes takes a desired list of routes for a set of apps, calculates the
	// changes that are needed to the existing routes to realise that list, and
	// then either atomically applies those changes or returns them for user
	// confirmation (otherwise known as a dry run).
	//
	// The given list of routes for each app is expected to contain the desired
	// configuration for all of the app's routes, and so if any existing routes
	// are not contained in the list, or they match ones in the list but have
	// different configuration, then they will be either deleted or updated.
	SetRoutes(ctx context.Context, in *SetRoutesRequest, opts ...grpc.CallOption) (*SetRoutesResponse, error)
	// ListAppRoutes list routes for a set of apps.
	ListAppRoutes(ctx context.Context, in *ListAppRoutesRequest, opts ...grpc.CallOption) (*ListAppRoutesResponse, error)
	// Lists TLS keys that can be referenced by static certificates.
	ListKeys(ctx context.Context, in *ListKeysRequest, opts ...grpc.CallOption) (*ListKeysResponse, error)
	// Gets a TLS private key.
	GetKey(ctx context.Context, in *GetKeyRequest, opts ...grpc.CallOption) (*GetKeyResponse, error)
	// Creates a TLS key. If the key already exists, it will be returned instead
	// of creating a duplicate, making the method idempotent.
	CreateKey(ctx context.Context, in *CreateKeyRequest, opts ...grpc.CallOption) (*CreateKeyResponse, error)
	// Deletes a TLS key. The key must not be referenced by any routes. This
	// method is idempotent and will not return an error if the specified key has
	// already been deleted.
	DeleteKey(ctx context.Context, in *DeleteKeyRequest, opts ...grpc.CallOption) (*DeleteKeyResponse, error)
	// Internal only. Updates a managed certificate.
	UpdateManagedCertificate(ctx context.Context, in *UpdateManagedCertificateRequest, opts ...grpc.CallOption) (*UpdateManagedCertificateResponse, error)
}

type routerClient struct {
	cc *grpc.ClientConn
}

func NewRouterClient(cc *grpc.ClientConn) RouterClient {
	return &routerClient{cc}
}

func (c *routerClient) SetRoutes(ctx context.Context, in *SetRoutesRequest, opts ...grpc.CallOption) (*SetRoutesResponse, error) {
	out := new(SetRoutesResponse)
	err := c.cc.Invoke(ctx, "/flynn.api.v1.Router/SetRoutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) ListAppRoutes(ctx context.Context, in *ListAppRoutesRequest, opts ...grpc.CallOption) (*ListAppRoutesResponse, error) {
	out := new(ListAppRoutesResponse)
	err := c.cc.Invoke(ctx, "/flynn.api.v1.Router/ListAppRoutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) ListKeys(ctx context.Context, in *ListKeysRequest, opts ...grpc.CallOption) (*ListKeysResponse, error) {
	out := new(ListKeysResponse)
	err := c.cc.Invoke(ctx, "/flynn.api.v1.Router/ListKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) GetKey(ctx context.Context, in *GetKeyRequest, opts ...grpc.CallOption) (*GetKeyResponse, error) {
	out := new(GetKeyResponse)
	err := c.cc.Invoke(ctx, "/flynn.api.v1.Router/GetKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) CreateKey(ctx context.Context, in *CreateKeyRequest, opts ...grpc.CallOption) (*CreateKeyResponse, error) {
	out := new(CreateKeyResponse)
	err := c.cc.Invoke(ctx, "/flynn.api.v1.Router/CreateKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) DeleteKey(ctx context.Context, in *DeleteKeyRequest, opts ...grpc.CallOption) (*DeleteKeyResponse, error) {
	out := new(DeleteKeyResponse)
	err := c.cc.Invoke(ctx, "/flynn.api.v1.Router/DeleteKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) UpdateManagedCertificate(ctx context.Context, in *UpdateManagedCertificateRequest, opts ...grpc.CallOption) (*UpdateManagedCertificateResponse, error) {
	out := new(UpdateManagedCertificateResponse)
	err := c.cc.Invoke(ctx, "/flynn.api.v1.Router/UpdateManagedCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RouterServer is the server API for Router service.
type RouterServer interface {
	// SetRoutes takes a desired list of routes for a set of apps, calculates the
	// changes that are needed to the existing routes to realise that list, and
	// then either atomically applies those changes or returns them for user
	// confirmation (otherwise known as a dry run).
	//
	// The given list of routes for each app is expected to contain the desired
	// configuration for all of the app's routes, and so if any existing routes
	// are not contained in the list, or they match ones in the list but have
	// different configuration, then they will be either deleted or updated.
	SetRoutes(context.Context, *SetRoutesRequest) (*SetRoutesResponse, error)
	// ListAppRoutes list routes for a set of apps.
	ListAppRoutes(context.Context, *ListAppRoutesRequest) (*ListAppRoutesResponse, error)
	// Lists TLS keys that can be referenced by static certificates.
	ListKeys(context.Context, *ListKeysRequest) (*ListKeysResponse, error)
	// Gets a TLS private key.
	GetKey(context.Context, *GetKeyRequest) (*GetKeyResponse, error)
	// Creates a TLS key. If the key already exists, it will be returned instead
	// of creating a duplicate, making the method idempotent.
	CreateKey(context.Context, *CreateKeyRequest) (*CreateKeyResponse, error)
	// Deletes a TLS key. The key must not be referenced by any routes. This
	// method is idempotent and will not return an error if the specified key has
	// already been deleted.
	DeleteKey(context.Context, *DeleteKeyRequest) (*DeleteKeyResponse, error)
	// Internal only. Updates a managed certificate.
	UpdateManagedCertificate(context.Context, *UpdateManagedCertificateRequest) (*UpdateManagedCertificateResponse, error)
}

// UnimplementedRouterServer can be embedded to have forward compatible implementations.
type UnimplementedRouterServer struct {
}

func (*UnimplementedRouterServer) SetRoutes(ctx context.Context, req *SetRoutesRequest) (*SetRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRoutes not implemented")
}
func (*UnimplementedRouterServer) ListAppRoutes(ctx context.Context, req *ListAppRoutesRequest) (*ListAppRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppRoutes not implemented")
}
func (*UnimplementedRouterServer) ListKeys(ctx context.Context, req *ListKeysRequest) (*ListKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKeys not implemented")
}
func (*UnimplementedRouterServer) GetKey(ctx context.Context, req *GetKeyRequest) (*GetKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKey not implemented")
}
func (*UnimplementedRouterServer) CreateKey(ctx context.Context, req *CreateKeyRequest) (*CreateKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKey not implemented")
}
func (*UnimplementedRouterServer) DeleteKey(ctx context.Context, req *DeleteKeyRequest) (*DeleteKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKey not implemented")
}
func (*UnimplementedRouterServer) UpdateManagedCertificate(ctx context.Context, req *UpdateManagedCertificateRequest) (*UpdateManagedCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateManagedCertificate not implemented")
}

func RegisterRouterServer(s *grpc.Server, srv RouterServer) {
	s.RegisterService(&_Router_serviceDesc, srv)
}

func _Router_SetRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).SetRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flynn.api.v1.Router/SetRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).SetRoutes(ctx, req.(*SetRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_ListAppRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).ListAppRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flynn.api.v1.Router/ListAppRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).ListAppRoutes(ctx, req.(*ListAppRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_ListKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).ListKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flynn.api.v1.Router/ListKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).ListKeys(ctx, req.(*ListKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_GetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).GetKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flynn.api.v1.Router/GetKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).GetKey(ctx, req.(*GetKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_CreateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).CreateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flynn.api.v1.Router/CreateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).CreateKey(ctx, req.(*CreateKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_DeleteKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).DeleteKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flynn.api.v1.Router/DeleteKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).DeleteKey(ctx, req.(*DeleteKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_UpdateManagedCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateManagedCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).UpdateManagedCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flynn.api.v1.Router/UpdateManagedCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).UpdateManagedCertificate(ctx, req.(*UpdateManagedCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Router_serviceDesc = grpc.ServiceDesc{
	ServiceName: "flynn.api.v1.Router",
	HandlerType: (*RouterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetRoutes",
			Handler:    _Router_SetRoutes_Handler,
		},
		{
			MethodName: "ListAppRoutes",
			Handler:    _Router_ListAppRoutes_Handler,
		},
		{
			MethodName: "ListKeys",
			Handler:    _Router_ListKeys_Handler,
		},
		{
			MethodName: "GetKey",
			Handler:    _Router_GetKey_Handler,
		},
		{
			MethodName: "CreateKey",
			Handler:    _Router_CreateKey_Handler,
		},
		{
			MethodName: "DeleteKey",
			Handler:    _Router_DeleteKey_Handler,
		},
		{
			MethodName: "UpdateManagedCertificate",
			Handler:    _Router_UpdateManagedCertificate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "router.proto",
}
